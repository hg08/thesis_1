\chapter{Source Codes for Calculating HB Dynamics}\label{code_hbacf}
%!function: hbacf_C_function_general.f95
\section{Source Codes for calculating $C_{\text{HB}}(t)$, $S_{\text{HB}}(t)$ and $k(t)$}
The following are the source codes for calculating the functions $C_{\text{HB}}(t)$, $S_{\text{HB}}(t)$ and $k(t)$.
\paragraph{$C_{\text{HB}}(t)$}
The fortran code \emph{hbacf\_C\_function\_general.f95} for calcualting the HB population auto-correlation function $C_{\text{HB}}(t)$ is as follows.
\begin{lstlisting}[language=fortran]
!================================================
! For ONE pair of moleculesï¼Œwe can obtain C_HB(t):
! C_{HB}(t)= <h(0)h(t)>/<h>.
! We implementate these correlation functions by
! calculate the average over N pairs of molecules.
! <> is the average over all starting time points
! i with h(i)=1.
! Date: 2015/10/17
!================================================
! input file: 
! time step
! name of system
! name of trajectory
! name of list
! nmo
! nat
! number of pairs of molecules(np)
! the new time step, or ns
!=======================================
program hbacf_C_function
implicit none
!==========
!parameters
!==========
character(LEN=200) :: filename, pos_filename, list_filename
integer,parameter :: rk=4
real(kind=rk),parameter :: rate=0.80        ! condition for cutting off autocorrelation functions
real,parameter :: rooc=12.25                ! cutoff distance of rOO (3.5**2 )
real,parameter :: rohc=6.0025               ! rOH (2.45**2)
real,parameter :: cosphic=0.866             ! 1.732/2; phiC=pi/6.
real(kind=rk),parameter :: h_min=0.5 ! condition for the existence of a h-bond for a step
real(kind=rk),parameter :: hb_min=0.5 ! condition for the existence of h-bond for a pair of water molecules
real(kind=rk)           :: r12,r13,r23,cosphi,pm,qj,&
                           tot_hb,delta_t,delta_t0
integer :: i,j,k,jj,nmo,nat,iatom,imovie,np,m1,m2,m3,mt,&
           nqj,tot_nhb,n_bonded_pairs,ns
real(kind=rk),allocatable,dimension (:)    :: h,hb,corr_h
real,allocatable,dimension (:,:)           :: x,y,z
character(LEN=3)  :: atom_type    ! we are not interested in the atom type in this calculation,
                                  ! thus I do not use allocatable array for it.
integer,allocatable,dimension(:)           :: ndx_1,ndx_2,ndx_3,&
    nhb_exist
real(kind=rk)  :: scalar
logical,allocatable,dimension (:)  :: hb_exist
!==================
!read data in input
!==================
write(6,*)'What is the time step in the traj. file (ps):'
read(5,*)delta_t0
write(6,*)'What is the name of the system:'
read(5,*)filename
write(6,*)'What is the name of the trajecotry file:'
read(5,*)pos_filename
write(6,*)'What is the name of thei list file:'
read(5,*)list_filename
write(6,*)'What is the total steps of the trajecotry:'
read(5,*)nmo    ! number of movie steps
write(6,*)'What is the total number of atoms in the system:'
read(5,*)nat    ! number of atoms per mole.
write(6,*)'What is the total number of water pairs:'
read(5,*)np     ! number of pairs
write(6,*)'What is the time step for calculating CORRELATION:'
read(5,*)ns     ! [ns*0.0005] ps is the new time step for calculating correl func.

list_filename=trim(list_filename)
allocate(ndx_1(np))
allocate(ndx_2(np))
allocate(ndx_3(np))
open(10,file=list_filename)
do k=1,np
    read(10,*)ndx_1(k),ndx_2(k),ndx_3(k)
enddo
close(10)

delta_t=ns*delta_t0    ! unit: ps
nmo=nmo/ns    ! Length of the correl. function
allocate(x(nat,nmo))
allocate(y(nat,nmo))
allocate(z(nat,nmo))
allocate(h(nmo))
allocate(hb(np))    ! Average H-bonded population
allocate(nhb_exist(np))
!=======================
!Read in trajectory file
!=======================
open(10,file=trim(pos_filename))
do imovie=1,nmo
   read(10,*)    !Neglect data of this line
   read(10,*)
   do iatom= 1,nat
       read (10,*)atom_type,x(iatom,imovie),y(iatom,imovie),&
                  z(iatom,imovie)
   enddo
   do i=1, (nat+2)*(ns-1)
       read(10,*)
   enddo
enddo
close(10)
write(6,*) 'end of trajectory reading'
!===================================
! Calculate autocorrelation function
! <h(0)h(t)>/<h>
! <> is the average over all starting 
! time points i with h(i)=1.
!================================
allocate(corr_h(nmo))
allocate(hb_exist(nmo))
! loop
corr_h(:)=0.0

tot_hb=0.0
tot_nhb=0

! loop
hb(:)=0.0
nhb_exist(:)=0
!=============
!The main loop
!=============
do k=1,np
  qj=0
  nqj=0
  m1=ndx_1(k)
  m2=ndx_2(k)
  m3=ndx_3(k)
  ! Calculate h(j)
  do jj =1, nmo
    h(jj)=0.0
    hb_exist(jj)=.False.
    r13= (x(m1,jj)-x(m3,jj))**2+       &
              (y(m1,jj)-y(m3,jj))**2+  &
              (z(m1,jj)-z(m3,jj))**2    ! r12,r13,r23: square of distance
    r12= (x(m1,jj)-x(m2,jj))**2+       &
              (y(m1,jj)-y(m2,jj))**2+  &
              (z(m1,jj)-z(m2,jj))**2
    r23= (x(m2,jj)-x(m3,jj))**2+       &
              (y(m2,jj)-y(m3,jj))**2+  &
              (z(m2,jj)-z(m3,jj))**2
    pm= (x(m3,jj)-x(m2,jj))*           &
             (x(m1,jj)-x(m2,jj))+      &
             (y(m3,jj)-y(m2,jj))*      &
             (y(m1,jj)-y(m2,jj))+      &
             (z(m3,jj)-z(m2,jj))*      &
             (z(m1,jj)-z(m2,jj))    ! pm: point multiplication.
    cosphi= pm/(sqrt(r23*r12))
    if (r13 .lt. rohc .and. r12 .lt. rooc  &
       .and. cosphi .gt. cosphic) then
        h(jj)=1.0
        hb_exist(jj)=.True.
        qj=qj+h(jj)    ! To calculate ave population of HB over all starting points for one pair of water molecules.
        nqj=nqj+1
    endif
  enddo
  hb(k)=qj
  nhb_exist(k)=nqj
  tot_hb=tot_hb+hb(k)
  tot_nhb=tot_nhb+nhb_exist(k)
  !==========================================
  !Calcualte the correlation function C_HB(t)
  !==========================================
  if (hb(k)>hb_min) then
      do mt=0,nmo-1    ! time interval
          scalar=0.d0
          do j=1,nmo-mt-1
              scalar=scalar+h(j)*h(j+mt)
              enddo
          corr_h(mt+1)=corr_h(mt+1)+scalar    ! sum_C_k(t)
      enddo
  endif
enddo    ! End of k-loop
deallocate(hb_exist,nhb_exist)
!=========================================
!Calculate the number of ever bonded pairs
!=========================================
n_bonded_pairs=0
do k=1,np
    if (hb(k)>hb_min) then
        n_bonded_pairs=n_bonded_pairs+1
    endif
enddo
!========================
!Normalization of C_HB(t)
!========================
do mt=0,nmo-1! time interval
    corr_h(mt+1)=corr_h(mt+1)/tot_nhb
enddo
deallocate(x,y,z,ndx_1,ndx_2,ndx_3)
!=====================
!Write the correlation
!C_HB(t)
!=====================
open(10,file=trim(filename)//'_hbacf_h.dat')
  do i=1,int(nmo*rate)
      write(10,*)(i-1)*delta_t,corr_h(i)
  enddo
  write(6,*)'written in '//trim(filename)//&
            '_hbacf_h.dat'
close(10)
!=====================
!Write the correlation
!ln(C_HB(t))
!=====================
open(10,file=trim(filename)//'_hbacf_ln_h.dat')
  do i=1,int(nmo*rate)
      write(10,*)(i-1)*delta_t,log(corr_h(i))
  enddo
  write(6,*)'written in '//trim(filename)//&
            '_hbacf_ln_h.dat'
close(10)
!==========
! Print <h>
!==========
open(10,file=trim(filename)//'_ave_h.dat')
  write(10,*) 'Ave. No. bonds:',tot_hb/nmo
  write(10,*) '<h>:',(tot_hb/nmo)/np
  write(6,*)'written in '//trim(filename)//&
            '_ave_h.dat'
close(10)
deallocate (h,corr_h,hb)

end
\end{lstlisting}

\paragraph{$S_{\text{HB}}(t)$}
The fortran code \emph{hbacf\_S\_function\_general.f95} for calcualting the HB survival probability $S_{\text{HB}}(t)$ is as follows.
\begin{lstlisting}[language=fortran]
!==========================
! S_{HB}(t)= <h(0)H(t)>/<h>
! 2015/10/21
!==========================
! input file: 
! name of system
! name of trajectory
! name of list
! nmo
! nat
! num. of pairs of molecules(np)
! the new time step, or ns
!==========================
program hbacf_S_function
implicit none
!==========
!parameters
!==========
character(LEN=200) :: filename, pos_filename, list_filename
integer,parameter :: rk=4
real(kind=rk),parameter :: rate=0.80    ! Condition for cutting off autocorrelation functions
real,parameter :: rooc=12.25      ! Cutoff distance of rOO (5.4**2 )
real,parameter :: rohc=6.0025     ! rOH (3.5**2)
real,parameter :: cosphic=0.866    ! 1.732/2; phiC=pi/6.
real(kind=rk),parameter :: h_min=0.5    ! Condition for h=1.0
real(kind=rk),parameter :: hb_min=0.5    ! Condition for the existence of h-bond
real(kind=rk)    :: r12,r13,r23,cosphi,pm,qj,tot_hb,hh,tau_hb,delta_t,delta_t0
integer :: i,j,k,jj,nmo,nat,iatom,&
           imovie,np,m1,m2,m3,mt,m,nqj,tot_nhb,n_bonded_pairs,ns
real(kind=rk),allocatable,dimension (:)    :: h,hb,corr_hh
real,allocatable,dimension (:,:)           :: x,y,z
character(LEN=3) :: atom_type    ! We are not interested in the atom type in this calculation,
                                 ! thus I do not use allocatable array for it.
integer,allocatable,dimension(:)     :: ndx_1, ndx_2, ndx_3, nhb_start
real(kind=rk) :: scalar_hh
logical,allocatable,dimension (:)  :: hb_start
!==================
!read data in input
!==================
write(6,*)'What is the time step in the traj. file (ps):'
read(5,*) delta_t0
write(6,*)'What is the name of the system:'
read(5,*) filename
write(6,*)'What is the name of the trajecotry file:'
read(5,*) pos_filename
write(6,*)'What is the name of the list file:'
read(5,*) list_filename
write(6,*)'What is the total steps of the trajecotry:'
read(5,*) nmo    !number of movie steps
write(6,*)'What is the total number of atoms in the system:'
read(5,*) nat    !number of atoms per mole.
write(6,*)'What is the total number of water pairs:'
read(5,*) np     !number of pairs
write(6,*)'What is the time step for calculating CORRELATION:'
read(5,*) ns     ! [ns*0.0005] ps is the new time step for calculation

allocate(ndx_1(np))
allocate(ndx_2(np))
allocate(ndx_3(np))
list_filename=trim(list_filename)
open(10,file=list_filename)
do k=1,np
    read(10,*)ndx_1(k),ndx_2(k),ndx_3(k)
enddo
close(10)

delta_t=ns*delta_t0 !unit: ps
nmo=nmo/ns    ! Length of the correl.function
allocate(x(nat,nmo))
allocate(y(nat,nmo))
allocate(z(nat,nmo))
allocate(h(nmo))
allocate(hb(np))    ! Average H-bonded population
allocate(nhb_start(np))
!=======================
!read in trajectory file
!=======================
open(10,file=trim(pos_filename))
do imovie=1,nmo
   read(10,*)!Neglect data of this line
   read(10,*)
   do iatom= 1,nat
       read (10,*)atom_type,x(iatom,imovie),y(iatom,imovie),&
                  z(iatom,imovie)
   enddo
   do i=1, (nat+2)*(ns-1) !impilimetation of changing time step
       read(10,*)
   enddo
enddo
close(10)
write(6,*) 'end of trajectory reading'

allocate(corr_hh(nmo))
allocate(hb_start(nmo))
!===================================
!Calculate autocorrelation function
! <h(0)h(t)>/<h>.
!===================================
tot_hb=0.0
tot_nhb=0
do i=1, nmo
    corr_hh(i)=0.0
enddo
do k=1,np
    hb(k)=0.0
    nhb_start(k)=0
enddo

do k=1, np
  qj=0
  nqj=0
  m1=ndx_1(k)
  m2=ndx_2(k)
  m3=ndx_3(k)
  !Calculate h(j)
  do jj =1, nmo
      h(jj)=0
      hb_start(jj)=.False.
      r13= (x(m1,jj)-x(m3,jj))**2+     &
              (y(m1,jj)-y(m3,jj))**2+  &
              (z(m1,jj)-z(m3,jj))**2     ! r12,r13,r23: square of distance
      r12= (x(m1,jj)-x(m2,jj))**2+     &
              (y(m1,jj)-y(m2,jj))**2+  &
              (z(m1,jj)-z(m2,jj))**2
      r23= (x(m2,jj)-x(m3,jj))**2+     &
              (y(m2,jj)-y(m3,jj))**2+  &
              (z(m2,jj)-z(m3,jj))**2
      pm= (x(m3,jj)-x(m2,jj))*         &
             (x(m1,jj)-x(m2,jj))+      &
             (y(m3,jj)-y(m2,jj))*      &
             (y(m1,jj)-y(m2,jj))+      &
             (z(m3,jj)-z(m2,jj))*      &
             (z(m1,jj)-z(m2,jj))    ! pm: point multiplication.
      cosphi= pm/(sqrt(r23*r12))
      if (r13 .lt. rohc .and. r12 .lt. rooc  &
         .and. cosphi .gt. cosphic) then
          h(jj)=1.0
          if (jj .eq. 1) then
              hb_start(jj)=.True.
              qj=qj+h(jj)
              nqj=nqj+1
          else
              if(h(jj-1)<h_min) then
                  hb_start(jj)=.True.
                  qj=qj+h(jj)
                  nqj=nqj+1
              endif
          endif
      endif
  enddo     ! jj-loop
  hb(k)=qj     ! Ave of hb over all starting points for each pair is not necessary in calculation of S(t)
  nhb_start(k)=nqj
  tot_hb=tot_hb+hb(k)
  tot_nhb=tot_nhb+nhb_start(k)
  !==================================
  !Calcualte the correlation function
  !==================================
  if (hb(k)>hb_min) then
      do mt=0,nmo-1 ! Time interval
          scalar_hh=0.d0
          do j=1, nmo-mt-1
          hh=0.0
              !==========================
              !Calculation of H(t): hh(j+mt)=h(j)*h(j+1)*...*h(j+mt)
              if (hb_start(j)) then
                  do m=0,mt
                      if (h(j+m)>hb_min) then
                          hh=1.0
                      else
                          hh=0.0
                          exit
                      endif
                  enddo
              endif
              !End of calculation of H(t)
              !==========================
          scalar_hh=scalar_hh+h(j)*hh
          enddo
      corr_hh(mt+1)=corr_hh(mt+1)+scalar_hh! sum_S_k(t)
      enddo
  endif
enddo ! end of k-loop
deallocate(hb_start)
!=========================================
!Calculate the number of ever bonded pairs
!=========================================
n_bonded_pairs=0
do k=1,np
    if (hb(k)>hb_min) then
        n_bonded_pairs=n_bonded_pairs+1
    endif
enddo
!=====================
!Normalization of S(t)
!=====================
corr_hh(:)=corr_hh(:)/tot_nhb
tau_hb=sum(corr_hh)*delta_t
deallocate(x,y,z,ndx_1,ndx_2,ndx_3)
!============================
!Write the correlation S_HB(t)
!============================
open(10,file=trim(filename)//'_hbacf_hh.dat')
    do i=1,int(nmo*rate)
        write(10,*)(i-1)*delta_t,corr_hh(i)
    enddo
    write(6,*)'written in '//trim(filename)//&
              '_hbacf_hh.dat'
close(10)
!=================================
!Write the correlation ln(S_HB(t))
!=================================
open(10,file=trim(filename)//'_hbacf_ln_hh.dat')
    do i=1,int(nmo*rate)
        write(10,*)(i-1)*delta_t,log(corr_hh(i))
    enddo
    write(6,*)'written in '//trim(filename)//&
              '_hbacf_ln_hh.dat'
close(10)
!================================
!Print No. bonds starting at t=0.
!================================
open(10,file=trim(filename)//'_No._bonds_starting_at_t=0.dat')
    write(10,*) 'No._bonds_starting_at_t=0:', tot_nhb
    write(10,*) 'H_bond lifetime(ps):',tau_hb
    write(6,*)'written in '//trim(filename)//&
              '_No._bonds_starting_at_t=0.dat'
close(10)
deallocate (h,corr_hh)

end
\end{lstlisting}
%
\paragraph{$k(t)$}      
The fortran code \emph{hbrf\_general.f95} for calcualting the HB population reactive flux $k(t)$ is as follows.
\begin{lstlisting}[language=fortran]
!==============
!Calculate k(t)
!==============
program hbrf_general
implicit none
!2015/09/9
!input file:
! time step
! system name
! trajectory name
! list name
! nmo
! nat
!num. of config. of molecules, or np
!==========
!parameters
!==========
character(len=200) :: filename, pos_filename, list_filename
integer,parameter :: rk=4
real(kind=rk),parameter :: rate=0.80     ! condition for cutting off autocorrelation functions
real(kind=rk) :: rooc=3.5                ! cutoff distance of rOO(3.5 A )
real(kind=rk) :: rohc=2.45               ! rOH (2.45 A)
real,parameter :: cosphic=0.866          ! 1.732/2; phiC=pi/6.
real(kind=rk),parameter :: hb_min=0.0000001 ! condition for the existence of h-bond
real(kind=rk)           :: r12,r13,r23,cosphi,pm,qj,tot_hb,delta_t0,delta_t
integer :: begin_time,end_time,rat,i,j,k,jj,nmo,nat,iatom,&
           imovie,np,m1,m2,m3,mt,ns,nmo_start,nmo_end
real(kind=rk),allocatable,dimension (:)    :: h,dh
real(kind=rk),allocatable,dimension (:)    :: hb
real,allocatable,dimension (:,:)           :: x,y,z
character(LEN=3) :: atom_type  ! we are not interested in the atom type in this calculation,
                                ! thus I do not use allocatable array for it.
integer,allocatable,dimension(:)           :: ndx_1, ndx_2, ndx_3
real(kind=rk),allocatable,dimension (:)    :: corr_h
real(kind=rk) :: scalar
!==================
!read data in input
!==================
write(6,*)'What is the timestep (ps):'
read(5,*)delta_t0
write(6,*)'What is the name of the system:'
read(5,*)filename
write(6,*)'What is the name of the trajecotry file:'
read(5,*)pos_filename
write(6,*)'What is the name of thei list file:'
read(5,*)list_filename
write(6,*)'What is the initial step of the trajecotry:'
read(5,*)nmo_start    ! number of the first movie steps
write(6,*)'What is the end step of the trajecotry:'
read(5,*)nmo_end    ! number of the last movie steps
write(6,*)'What is the total number of atoms in the system:'
read(5,*)nat!number of atoms per mole.
write(6,*)'What is the total number of water pairs:'
read(5,*)np    ! number of pairs
write(6,*)'What is the time step for calculating the correlation:'
read(5,*)ns    ! [ns*0.0005] ps is the new time step for calculating correl,if delta_t0=0.0005 ps.

allocate(ndx_1(np))
allocate(ndx_2(np))
allocate(ndx_3(np))
list_filename=trim(list_filename)
open(10,file=list_filename)
do k=1,np
    read(10,*)ndx_1(k),ndx_2(k),ndx_3(k)
enddo
close(10)

rooc=rooc*rooc
rohc=rohc*rohc
delta_t=ns*delta_t0
nmo=nmo_end-nmo_start
nmo=nmo/ns
allocate(x(nat,nmo))
allocate(y(nat,nmo))
allocate(z(nat,nmo))
allocate(h(nmo))
allocate(dh(nmo))
allocate(hb(np))    ! Average H-bonded population
!=======================
!read in trajectory file
!=======================
open(10,file=trim(pos_filename))
do i=1,(nat+2)*(nmo_start-1)
   read(10,*)!Neglect data of this line
enddo
do imovie=1,nmo
   read(10,*)!Neglect data of this line
   read(10,*)
   do iatom= 1,nat
       read (10,*)atom_type,x(iatom,imovie),y(iatom,imovie),&
                  z(iatom,imovie)
   enddo
   do i=1,(nat+2)*(ns-1)
       read(10,*)    ! Neglect (nat+2)*(ns-1) lines
   enddo
enddo
close(10)
write(6,*) 'end of trajectory reading'
!==================================
!Calculate autocorrelation function
! <h(0)h(t)>/<h>
!==================================

allocate(corr_h(nmo))
tot_hb=0.0
corr_h=0.0
hb=0.0

do k=1,np
  qj=0
  m1=ndx_1(k)
  m2=ndx_2(k)
  m3=ndx_3(k)
  !calculate h(j)
  do jj =1, nmo
    h(jj)=0
    r13= (x(m1,jj)-x(m3,jj))**2+       &
              (y(m1,jj)-y(m3,jj))**2+  &
              (z(m1,jj)-z(m3,jj))**2    ! r: Squra of distances
    r12= (x(m1,jj)-x(m2,jj))**2+       &
              (y(m1,jj)-y(m2,jj))**2+  &
              (z(m1,jj)-z(m2,jj))**2
    r23= (x(m2,jj)-x(m3,jj))**2+       &
              (y(m2,jj)-y(m3,jj))**2+  &
              (z(m2,jj)-z(m3,jj))**2
    pm= (x(m3,jj)-x(m2,jj))*           &
             (x(m1,jj)-x(m2,jj))+      &
             (y(m3,jj)-y(m2,jj))*      &
             (y(m1,jj)-y(m2,jj))+      &
             (z(m3,jj)-z(m2,jj))*      &
             (z(m1,jj)-z(m2,jj))
    cosphi= pm/(sqrt(r23*r12))    ! pm: Point multiplication.
    if (r13 .lt. rohc .and. r12 .lt. rooc   &
       .and. cosphi .gt. cosphic) then
        h(jj)=1.0
        qj=qj+h(jj)
    endif
  enddo

  dh(1)=h(2)-h(1)
  dh(2)=h(2)-h(1)
  do jj=3,nmo
      dh(jj)=3*h(jj)-4*h(jj-1)+h(jj-2)    ! Three point formula; -1*(increament) of h
  enddo
  qj=qj/nmo    ! Ave of hb for each pair
  hb(k)=qj
  tot_hb=tot_hb+hb(k)
  do mt=0,nmo-1    ! time interval
      if(hb(k)>hb_min) then
          scalar=0.d0
          do j=1, nmo-mt
              scalar=scalar-dh(j)*(1-h(j+mt))    ! 1: The first pair of water molecules
          enddo
          scalar=scalar/(nmo-mt)    ! k_k(t)
          corr_h(mt+1)=corr_h(mt+1)+scalar    ! sum_k_k(t)
      endif
  enddo
enddo    ! k loop
! One use  'tot_hb=tot_hb/np' to get <h>.
do mt=0,nmo-1! time interval
    corr_h(mt+1)=corr_h(mt+1)/tot_hb
enddo
write(6,*) corr_h(1),corr_h(2),corr_h(3)
deallocate(ndx_1,ndx_2,ndx_3,hb)

!=====================================================
! Calculate k(t)
! Notice that we start from 'i=2', instead of 'i=1'.
! We should not include the first term! Since it is 
! related to forming of HB!
!=====================================================
open(10,file=trim(filename)//'_rfachb_h_17.dat')
    do i=1,int(nmo*rate)
        write(10,*)(i-1)*delta_t,corr_h(i)
    enddo
    write(6,*)'written in'//trim(filename)//'_rfachb_h_17.dat'
close(10)

end
\end{lstlisting}
%
\section{Input File}
For a given system, the input file gives all pairs of molecules which may H-bonded. Each line in the file 
includes three index of O or H atom in a pair of molecules, which may H-bonded. It provides all pairs of
molecules that may H-bonded. For example, for cluster LiNO$_3$(H$_2$O)$_3$ (Fig.\space\ref{fig:clusters_4})(b), there are 3 
water molecules and 3 nitrate O atoms, i.e., $N_{\text{water}}=3$ and $N_{\text {nitrate O}}=3$.  The number of possible H-bonds $N_{\text HB}$ for the cluster is
\begin{equation}
N_{\text{HB}}=2N_{\text{water}} [N_{\text {nitrate O}}+ (N_{\text{water}}-1)],
\label{N_HB}
\end{equation}
where the factor 2 stems from the fact that there are two hydrogen atoms in a water molecule.
Thus, for the cluster LiNO$_3$(H$_2$O)$_3$, $N_{\text{HB}}$=30. The input file for the cluster is as follows.
% backgroundcolor=\color{lightgray},
\begin{lstlisting}[language=fortran]                  
! filename: LiNO3-3w_input.dat
! 1st column: O (nitrate O, or water O)
! 2nd column: O (water O)
! 3rd column: H (water H)
           2           5           6
           3           5           6
           4           5           6
           8           5           6
          11           5           6
           2           5           7
           3           5           7
           4           5           7
           8           5           7
          11           5           7
           2           8           9
           3           8           9
           4           8           9
           5           8           9
          11           8           9
           2           8          10
           3           8          10
           4           8          10
           5           8          10
          11           8          10
           2          11          12
           3          11          12
           4          11          12
           5          11          12
           8          11          12
           2          11          13
           3          11          13
           4          11          13
           5          11          13
           8          11          13
\end{lstlisting}



